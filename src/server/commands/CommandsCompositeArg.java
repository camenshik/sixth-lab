package server.commands;

import server.CommandHandler;
import server.IO.WorkingWithLocalIO;
import server.connect.Command;
import server.connect.Connection;
import server.connect.ConnectionManager;
import server.exceptions.EotException;
import server.annotations.Autogenerated;
import server.annotations.Nullable;
import server.collections.Entity;
import server.collections.Organization;
import server.exceptions.*;

import java.io.IOException;
import java.lang.reflect.Field;
import java.util.ArrayList;

public enum CommandsCompositeArg implements WorkingWithCompositeArg {
    ADD(
            "add",
            "добавить новый элемент в коллекцию",
            ""
    ) {
        @Override
        public boolean execution(CommandHandler commandHandler, String command) throws CommandException, IOException {
            try {
                Organization org = new Organization(commandHandler.getOrganizations().getNewId());
                Entity entity = this.setEntityFields(commandHandler, org, this.getNameCommand());
                if (entity == null)
                    return false;
                commandHandler.getOrganizations().addElement(org);
            } catch (WrapperException e) {
                throw new CommandException(e.getMessage());
            }
            if (commandHandler.getConnectionManager().getProcessingClient() != null)
                commandHandler.getConnectionManager().getProcessingClient().removeExecuteCommand();
            commandHandler.getManagerIO().getIO().output("Новый элемент добавлен");
            return true;
        }
    },
    UPDATE_ID(
            "update_id",
            "обновить значение элемента коллекции, id которого равен заданному",
            ""
    ) {
        @Override
        public boolean execution(CommandHandler commandHandler, String command) throws CommandException, IOException {
            long id = Long.parseLong(this.parseArg(command));
            if (!commandHandler.getOrganizations().contains(id))
                throw new CollectionsException(String.format("Элемент с id %s не найден", id));
            Organization org = new Organization(1);
            Entity entity = this.setEntityFields(commandHandler, org, this.getNameCommand());
            if (entity == null)
                return false;
            try {
                commandHandler.getOrganizations().updateElement(id, org);
            } catch(WrapperException e) {
                throw new CommandException(e.getMessage());
            }
            if (commandHandler.getConnectionManager().getProcessingClient() != null)
                commandHandler.getConnectionManager().getProcessingClient().removeExecuteCommand();
            commandHandler.getManagerIO().getIO().outputComposite("Элемент обновлен");
            commandHandler.getManagerIO().getIO().endOutputComposite(true);
            return true;
        }
    },
    ADD_IF_MAX(
            "add_if_max",
            "добавить новый элемент в коллекцию, если его значение превышает значение наибольшего элемента этой коллекции",
            ""
    ) {
        @Override
        public boolean execution(CommandHandler commandHandler, String command) throws CommandException, IOException {
            try {
                Organization newOrg = new Organization(commandHandler.getOrganizations().getNewId());
                Entity entity = this.setEntityFields(commandHandler, newOrg, this.getNameCommand());
                if (entity == null)
                    return false;
                double weight = newOrg.countWeight();
                boolean isMax = false;
                for (Organization orgIter : commandHandler.getOrganizations().getSet()) {
                    if (!(orgIter.countWeight() >= weight)) {
                        isMax = true;
                        break;
                    }
                }
                if (!isMax) {
                    commandHandler.getManagerIO().getIO().outputComposite(
                            "Элемент не был добавлен, т.к. он не превышает наибольший"
                    );
                    if (commandHandler.getConnectionManager().getProcessingClient() != null)
                        commandHandler.getConnectionManager().getProcessingClient().removeExecuteCommand();
                    commandHandler.getManagerIO().getIO().endOutputComposite(false);
                    return true;
                }
                commandHandler.getOrganizations().addElement(newOrg);
            } catch(WrapperException e) {
                throw new CommandException(e.getMessage());
            }
            if (commandHandler.getConnectionManager().getProcessingClient() != null)
                commandHandler.getConnectionManager().getProcessingClient().removeExecuteCommand();
            commandHandler.getManagerIO().getIO().outputComposite("Новый элемент добавлен");
            commandHandler.getManagerIO().getIO().endOutputComposite(true);
            return true;
        }
    },
    REMOVE_LOWER(
            "remove_lower",
            "удалить из коллекции все элементы, меньшие, чем заданный",
            ""
    ) {
        @Override
        public boolean execution(CommandHandler commandHandler, String command) throws CommandException, IOException {
            try {
                Organization newOrg = new Organization(commandHandler.getOrganizations().getNewId());
                Entity entity = this.setEntityFields(commandHandler, newOrg, this.getNameCommand());
                if (entity == null)
                    return false;
                double weight = newOrg.countWeight();
                for (Organization orgIter : commandHandler.getOrganizations().getSet().toArray(new Organization[0])) {
                    if (orgIter.countWeight() < weight) {
                        commandHandler.getOrganizations().removeElement(orgIter);
                    }
                }
            } catch(WrapperException e) {
                throw new CommandException(e.getMessage());
            }
            if (commandHandler.getConnectionManager().getProcessingClient() != null)
                commandHandler.getConnectionManager().getProcessingClient().removeExecuteCommand();
            commandHandler.getManagerIO().getIO().output("Все элементы, меньшие, чем заданный удалены");
            return true;
        }
    };

    private final String nameCommand;
    private final String description;
    private final String nameArg;
    CommandsCompositeArg(String nameCommand, String description, String nameArg) {
        this.nameCommand = nameCommand;
        this.description = description;
        this.nameArg = nameArg;
    }

    @Override
    public String getNameCommand() {
        return this.nameCommand;
    }

    @Override
    public String getDescription() {
        return this.description;
    }

    @Override
    public String getNameArg() {
        return this.nameArg;
    }

    @Override
    public String parseArg(String command) throws ArgumentException {
        String[] parts = command.split(" ");
        if (parts.length <= 1) {
            throw new ArgumentException("не переданы аргументы");
        } else if (parts.length > 2) {
            throw new ArgumentException("передано более 1 аргумента");
        }
        return parts[1];
    }

    /**
     * Возвращает null, если не все данные получены
     * @param commandHandler
     * @param entity
     * @param nameCommand
     * @return
     * @throws IOException
     */
    @Override
    public Entity setEntityFields(
            CommandHandler commandHandler,
            Entity entity,
            String nameCommand) throws IOException {
        Entity result;
        if (commandHandler.getManagerIO().getIO() instanceof WorkingWithLocalIO) {
            result = this.createEntityByServer(commandHandler, entity);
        } else {
            result = this.createEntityByClient(commandHandler, entity, nameCommand, 0);
            if (result != null)
                commandHandler.getConnectionManager().getProcessingClient().getCommands().get(0).removeArgs();
        }
        return result;
    }

    /**
     * Возвращает false, если потребовался ввод дополнительных данных,
     * true если поле успешно созданно
     * @param commandHandler
     * @param field
     * @param entity
     * @param indexProcessingArg
     * @return
     * @throws IOException
     */
    @Override
    public boolean inputValueFieldByClient(
            CommandHandler commandHandler,
            Field field,
            Entity entity,
            ArrayList<String> args,
            int indexProcessingArg) throws IOException {
        if (args.size() - 1 < indexProcessingArg) {
            if (field.getAnnotation(Nullable.class) == null) {
                commandHandler.getManagerIO().getIO().outputComposite(String.format("Введите %s:", field.getName()));
            } else {
                commandHandler.getManagerIO().getIO().outputComposite(
                        String.format("Введите %s (это необязательное поле, чтобы пропустить нажмите Enter):", field.getName())
                );
            }
            if (field.getType().isEnum()) {
                for (int i = 0; i < field.getType().getEnumConstants().length; i++) {
                    commandHandler.getManagerIO().getIO().outputComposite(
                            String.format(
                                    "%d) %s:", i, field.getType().getEnumConstants()[i].toString()
                            )
                    );
                }
            }
            commandHandler.getManagerIO().getIO().endOutputComposite(true);
            return false;
        }
        try {
            String data = args.get(indexProcessingArg);
            if (data == null)
                throw new EotException();
            data = data.trim();
            entity.setValueField(field, data);
        } catch (ReflectiveOperationException | IllegalArgumentException e) {
            args.remove(args.size()-1);
            commandHandler.getManagerIO().getIO().outputComposite("Формат ввода неверен, повторите ввод:");
            commandHandler.getManagerIO().getIO().endOutputComposite(true);
            return false;
        } catch (CollectionsException | AnnotationsException e) {
            args.remove(args.size()-1);
            commandHandler.getManagerIO().getIO().outputComposite(String.format("Повторите ввод, %s:", e.getMessage()));
            commandHandler.getManagerIO().getIO().endOutputComposite(true);
            return false;
        }
        return true;
    }

    public Entity createEntityByClient(
            CommandHandler commandHandler,
            Entity entity,
            String nameCommand,
            int indexProcessingCommand) throws IOException {
        ConnectionManager connectionManager = commandHandler.getConnectionManager();
        Connection clientConnection = connectionManager.getProcessingClient();
        if (!clientConnection.getExecuteCommand().getName().equals(nameCommand)) {
            commandHandler.getManagerIO().getIO().outputComposite(String.format("Ввод %s:", entity.toString()));
            clientConnection.addCommand(nameCommand);
        }
        Command command = clientConnection.getExecuteCommand();
        Field[] fields = entity.getAllFields();
        ArrayList<String> args = command.getArgs();
        for (Field field : fields) {
            try {
                if (field.getAnnotation(Autogenerated.class) != null) {
                    continue;
                }
                if (entity.isSubEntity(field)) {
                    if (field.getAnnotation(Nullable.class) != null) {
                        if (args.size() - 1 < indexProcessingCommand) {
                            commandHandler.getManagerIO().getIO().outputComposite(String.format(
                                    "%s - составное поле можно пропустить, чтобы пропустить его введите skip",
                                    field.getName()
                            ));
                            commandHandler.getManagerIO().getIO().endOutputComposite(true);
                            return null;
                        } else {
                            String response;
                            response = args.get(indexProcessingCommand);
                            if (!response.equals("skip")) {
                                indexProcessingCommand++;
                            } else {
                                continue;
                            }
                        }
                    }
                    Entity subEntity = this.createEntityByClient(
                            commandHandler,
                            (Entity) field.getType().getConstructor().newInstance(),
                            nameCommand,
                            indexProcessingCommand
                    );

                    if (subEntity == null)
                        return null;

                    entity.setValueField(field, subEntity);
                } else {
                    boolean inputValue = this.inputValueFieldByClient(
                            commandHandler,
                            field,
                            entity,
                            args,
                            indexProcessingCommand
                    );
                    if (!inputValue) {
                        return null;
                    }
                }
            } catch (ReflectiveOperationException | IOException e) {
                System.out.println(e.getMessage());
            }
            indexProcessingCommand++;
        }
        return entity;
    }

    @Override
    public void inputValueFieldServer(CommandHandler commandHandler, Field field, Entity entity) throws IOException {
        boolean isExit = false;
        if (field.getAnnotation(Nullable.class) == null) {
            commandHandler.getManagerIO().getIO().output(String.format("Введите %s:", field.getName()));
        } else {
            commandHandler.getManagerIO().getIO().output(
                    String.format("Введите %s (это необязательное поле, чтобы пропустить нажмите Enter):", field.getName())
            );
        }
        if (field.getType().isEnum()) {
            for (int i=0; i < field.getType().getEnumConstants().length; i++) {
                commandHandler.getManagerIO().getIO().output(String.format(
                        "%d) %s:", i, field.getType().getEnumConstants()[i].toString()
                ));
            }
        }
        do {
            try {
                String data = commandHandler.getManagerIO().getIO().input();
                if (data == null)
                    throw new EotException();
                data = data.trim();
                entity.setValueField(field, data);
                isExit = true;
            } catch (ReflectiveOperationException | IllegalArgumentException e) {
                commandHandler.getManagerIO().getIO().output("Формат ввода неверен, повторите ввод:");
            } catch (CollectionsException | AnnotationsException e) {
                commandHandler.getManagerIO().getIO().output(String.format("Повторите ввод, %s:", e.getMessage()));
            } catch (IOException e) {
                System.out.println(e.getMessage());
            }
        } while (!isExit);
    }

    public Entity createEntityByServer(CommandHandler commandHandler, Entity entity) throws IOException {
        commandHandler.getManagerIO().getIO().output(String.format("Ввод %s:", entity.toString()));
        for (Field field : entity.getAllFields()) {
            try {
                if (field.getAnnotation(Autogenerated.class) != null)
                    continue;
                if (entity.isSubEntity(field)) {
                    if (field.getAnnotation(Nullable.class) != null) {
                        commandHandler.getManagerIO().getIO().output(String.format(
                                "%s - составное поле можно пропустить, чтобы пропустить его введите skip",
                                field.getName()
                        ));
                        if (commandHandler.getManagerIO().getIO().input().trim().equals("skip"))
                            continue;
                    }
                    entity.setValueField(
                            field,
                            this.createEntityByServer(
                                    commandHandler,
                                    (Entity) field.getType().getConstructor().newInstance()
                            )
                    );
                } else {
                    this.inputValueFieldServer(commandHandler, field, entity);
                }
            } catch (ReflectiveOperationException | IOException e) {
                System.out.println(e.getMessage());
            }
        }
        return entity;
    }
}
